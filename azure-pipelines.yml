trigger:
  - master

name: 4.0.$(Build.BuildId)

variables:
- name: BuildPlatform
  value: 'Any CPU'
- name: BuildConfiguration
  value: 'Release'
- group: CodeSigning

stages:
  - stage: Build
    jobs:
      - job: Build
        displayName: Build AP.MobileToolkit.Fonts
        pool:
          vmImage: windows-latest
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: sdk
              includePreviewVersions: true
              version: 6.0.100-preview.4.21255.9

          # - powershell: |
          #     dotnet tool install --global Redth.Net.Maui.Check --version 0.5.0
          #     maui-check --preview --non-interactive --ci

          #   displayName: Setup for Maui and .NET 6

          - powershell: |
              dotnet tool install --global dotnet-vs --version 1.0.0
              vs install preview enterprise +mobile
            displayName: Setup VS Preview

          - powershell: |
              msbuild build-forms.slnf /r /p:Configuration=Release
            displayName: MSBuild

          - powershell: |
              dotnet test tests\AP.MobileToolkit.Fonts.Tests\AP.MobileToolkit.Fonts.Tests.csproj --configuration Release --logger trx --no-build --collect "Code Coverage"
            displayName: Run Tests

          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testRunTitle: 'AP.MobileToolkit.Fonts'
              testResultsFiles: '**/*.trx'

          - powershell: 'build\Sign-Packages.ps1'
            displayName: 'Authenticode Sign Artifacts'
            env:
              SignClientUser: $(SignClientUser)
              SignClientSecret: $(SignClientSecret)
              SignClientClientId: $(SignClientClientId)
              SignClientTenantId: $(SignClientTenantId)
              SignServiceResourceId: $(SignServiceResourceId)
            condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
            enabled: false

          - task: PublishPipelineArtifact@1
            displayName: Publish Pipeline Artifacts
            inputs:
              artifact: NuGet
              targetPath: $(Build.ArtifactStagingDirectory)

  - stage: Deploy
    displayName: Deploy CI Packages
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['system.pullrequest.isfork'], false))
    jobs:
      - deployment: sponsorconnect
        displayName: SponsorConnect
        environment: SponsorConnect
        strategy:
          runOnce:
            deploy:
              steps:
              - task: NuGetCommand@2
                displayName: 'NuGet push'
                inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
                    nuGetFeedType: external
                    publishFeedCredentials: 'SponsorConnect'
      - deployment: apnuget
        displayName: 'nuget.avantipoint.com'
        environment: APNuGet
        strategy:
          runOnce:
            deploy:
              steps:
              - task: NuGetCommand@2
                displayName: 'NuGet push'
                inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
                    nuGetFeedType: external
                    publishFeedCredentials: 'AvantiPoint-NuGet'

  - stage: NuGet
    displayName: Deploy to NuGet.org
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['system.pullrequest.isfork'], false), eq(variables['IS_RELEASE'], 'true'))
    jobs:
      - deployment: NuGet
        displayName: 'NuGet.org'
        environment: 'NuGet'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  clean: true

                - task: PowerShell@2
                  displayName: Process Release
                  inputs:
                    targetType: filePath
                    filePath: $(System.DefaultWorkingDirectory)/build/Process-Release.ps1

                - task: GitHubRelease@1
                  inputs:
                    action: create
                    gitHubConnection: GitHub
                    assets: $(Pipeline.Workspace)/**/*.nupkg
                    tag: 'v$(VersionName)'
                    tagSource: userSpecifiedTag
                    isPreRelease: $(IS_PREVIEW)
                    title: $(ReleaseDisplayName)
                    addChangeLog: true

                - task: NuGetCommand@2
                  displayName: Push to NuGet.org
                  inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
                    nuGetFeedType: external
                    publishFeedCredentials: 'NuGet.org'
